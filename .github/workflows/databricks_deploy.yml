name: Build and Deploy PySpark Project to Databricks

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      # Step 4: Build wheel file
      - name: Build wheel file
        run: python setup.py bdist_wheel

      # Step 5: Install jq (JSON parsing tool)
      - name: Install jq
        run: sudo apt-get install -y jq

      # Step 6: Upload .whl and Deploy Databricks Job
      - name: Upload and Deploy Databricks Job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          # Install the latest new Databricks CLI
          pip install databricks-cli==0.18.0

          # Upload the wheel file to DBFS
          WHL_PATH=$(ls dist/*.whl)
          echo "Uploading wheel: $WHL_PATH"
          databricks fs cp $WHL_PATH dbfs:/FileStore/wheels/ --overwrite

          # Get job name from JSON
          JOB_NAME=$(jq -r '.name' databricks_job.json)

          # Check if job exists
          JOB_ID=$(databricks jobs list --output json | jq -r ".jobs[] | select(.settings.name==\"$JOB_NAME\") | .job_id")

          if [ -z "$JOB_ID" ]; then
            echo "Job not found. Creating a new job: $JOB_NAME"
            databricks jobs create --json "$(cat databricks_job.json)"
          else
            echo "Job $JOB_NAME exists (ID: $JOB_ID). Updating..."
            databricks jobs reset --job-id $JOB_ID --json "$(cat databricks_job.json)"
          fi
